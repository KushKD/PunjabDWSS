package com.prwss.mis.common.util.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.BeansException;
import org.springframework.dao.DataAccessException;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.prwss.mis.common.exception.MISException;
import com.prwss.mis.common.util.MISConstants;
import com.prwss.mis.common.util.MisUtility;
import com.prwss.mis.masters.employee.dao.EmployeeBean;
import com.prwss.mis.masters.employee.dao.EmployeeDao;
import com.prwss.mis.masters.item.dao.ItemBean;
import com.prwss.mis.masters.item.dao.ItemDao;
import com.prwss.mis.masters.location.dao.LocationBean;
import com.prwss.mis.masters.location.dao.LocationDao;
import com.prwss.mis.masters.store.dao.StoreBean;
import com.prwss.mis.masters.store.dao.StoreDao;
import com.prwss.mis.masters.unitofmeasurement.dao.UnitOfMeasurementBean;
import com.prwss.mis.masters.unitofmeasurement.dao.UnitOfMeasurementDao;
import com.prwss.mis.masters.vendor.dao.VendorBean;
import com.prwss.mis.tender.contract.dao.ContractDao;
import com.prwss.mis.tender.contract.dao.ContractHeaderBean;

public class GetFilterValues extends HttpServlet {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -1738910969424259354L;
	private LocationDao locationDao;
	private StoreDao storeDao;
	private ContractDao contractDao;
	private ItemDao itemDao;
	private UnitOfMeasurementDao unitOfMeasurementDao;
	private EmployeeDao employeeDao;
	private Logger log = Logger.getLogger(GetFilterValues.class);
	
	private StringBuffer getBlock(String locationId){
		StringBuffer buffer = new StringBuffer();
	try{
		
		LocationBean locationBean = new LocationBean();
		locationBean.setLocationId(locationId);
		locationBean = locationDao.getLocation(locationBean);
		buffer.append("<option value='' selected>");
		buffer.append("Select");
		buffer.append("</option>");
		
		Set<LocationBean> blockList = locationDao.getChildLocationIds(locationBean.getParentLocation(), "BLOCK");
		for (LocationBean locationBean2 : blockList) {
			buffer.append("<option value=\"").append(locationBean2.getLocationId()).append("\">");
			buffer.append(locationBean2.getLocationName()).append(" - (").append(locationBean2.getLocationId()).append(")");
			buffer.append("</option>");
		}	
	
	} catch (Exception e) {
		log.error(e.getLocalizedMessage(),e);
	}
	return buffer;
	}
	
	private StringBuffer getVillage(String id)
	{
		StringBuffer buffer = new StringBuffer();
		try{
			LocationBean locationBean = new LocationBean();
			locationBean.setLocationId(id);
			locationBean = locationDao.getLocation(locationBean);
			if(locationBean.getLocationType().equalsIgnoreCase("BLOCK")){
				buffer.append("<option value='' selected>");
				buffer.append("Select");
				buffer.append("</option>");
			Set<LocationBean>	villageList = locationDao.getChildLocationIds(locationBean.getLocationId(), "VILLAGE");
			for (LocationBean locationBean2 : villageList) {
				buffer.append("<option value=\"").append(locationBean2.getLocationId()).append("\">");
				buffer.append(locationBean2.getLocationName()).append(" - (").append(locationBean2.getLocationId()).append(")");
				buffer.append("</option>");
			}	
				
			}
		
		} catch (Exception e) {
			log.error(e.getLocalizedMessage(),e);
		}
		return buffer;
	}
	
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		resp.setContentType("text/html");
		try {
			WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(req.getSession().getServletContext());
			this.locationDao = (LocationDao)webApplicationContext.getBean("locationDao");
			this.itemDao=(ItemDao)webApplicationContext.getBean("itemDao");			
			StringBuffer buffer = new StringBuffer();
			
			if(MisUtility.ifEmpty(req.getParameter("locationId"))){
				buffer = getBlock((String)req.getParameter("locationId"));				
			}			
			if(MisUtility.ifEmpty(req.getParameter("blockId"))){
				buffer = getVillage((String)req.getParameter("blockId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("zoneId"))){
				System.out.println("IN ZONE"+req.getParameter("zoneId"));
				buffer = getCircleId((String)req.getParameter("zoneId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("circleId"))){
				buffer = getDistrictId((String)req.getParameter("circleId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("locationStoreId"))){
				this.storeDao=(StoreDao)webApplicationContext.getBean("storeDao");
				buffer = getStore((String)req.getParameter("locationStoreId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("locationContractId"))){
				this.contractDao=(ContractDao)webApplicationContext.getBean("contractDao");
				buffer = getContracts((String)req.getParameter("locationContractId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("groupId"))){
				buffer = getItem((String)req.getParameter("groupId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("itemId"))){				
				buffer = getUOM((String)req.getParameter("itemId"));				
			}
			if(MisUtility.ifEmpty(req.getParameter("issuedType"))){		
				System.out.println("i am here");
				this.employeeDao=(EmployeeDao)webApplicationContext.getBean("employeeDao");
				buffer = getIssuedTo((String)req.getParameter("issuedType"),(String)req.getParameter("locationId"));				
			}
			
			PrintWriter out = resp.getWriter();
			if(MisUtility.ifEmpty(buffer.toString()) && buffer.length() > 1 ){
				//out.print(buffer.substring(0, buffer.length() - 1));
				out.print(buffer.toString());
			}
		} catch (BeansException e) {
			log.error(e.getLocalizedMessage(),e);
		} catch(Exception e){
			log.error(e.getLocalizedMessage(),e);
		}		
	}
	
	private StringBuffer getIssuedTo(String issuedType, String locationId) {
		System.out.println("i am here::: "+issuedType+":: "+locationId);
		StringBuffer buffer = new StringBuffer();
		Set<LocationBean> locationBeans = null;
		Set<EmployeeBean> employeeBeans = null;		
		List<String> statusList = new ArrayList<String>();
		List<String> typeList = new ArrayList<String>();
		typeList.add(MISConstants.MIS_LOCATION_TYPE_DPMC);
		typeList.add(MISConstants.MIS_LOCATION_TYPE_DO);
		typeList.add(MISConstants.MIS_LOCATION_TYPE_SPMC);
		statusList.add(MISConstants.MASTER_STATUS_APPROVED);
		statusList.add(MISConstants.MASTER_STATUS_VERIFIED);

		try {
			
				if((issuedType.equalsIgnoreCase(MISConstants.ISSUE_TO_EMPLOYEE))){
					if(MisUtility.ifEmpty(locationId)){
					employeeBeans = employeeDao.getDistinctEmployeeIds(locationId, statusList);
					if(!MisUtility.ifEmpty(employeeBeans)){
						buffer.append("<option value='' selected>");
						buffer.append("Select");
						buffer.append("</option>");
						for (EmployeeBean bean : employeeBeans) {
							
							buffer.append("<option value=\"").append(bean.getEmployeeId()).append("\">");
							buffer.append(bean.getEmployeeName()+"-"+"("+bean.getEmployeeId()+")");
							buffer.append("</option>");
						}
					}
					
					}
					}else if((issuedType.equalsIgnoreCase(MISConstants.ISSUE_TO_OFFICE))){
						locationBeans = locationDao.getLocationIdOnTypeList(typeList);
							if(!MisUtility.ifEmpty(locationBeans)){
								buffer.append("<option value='' selected>");
								buffer.append("Select");
								buffer.append("</option>");
								for (LocationBean bean : locationBeans) {
									buffer.append("<option value=\"").append(bean.getLocationId()).append("\">");
									buffer.append(bean.getLocationName()+"-"+"("+bean.getLocationId()+")");
									buffer.append("</option>");
								}
							
							}		
					
				}
			
		
				
		} catch (NumberFormatException e) {
			e.printStackTrace();
			log.error(e);
		} catch (DataAccessException e) {
			e.printStackTrace();
			log.error(e);
		} 
		
		
		return buffer;
	}

	private StringBuffer getUOM(String itemId) {
		StringBuffer buffer = new StringBuffer();
		try{
			
					
			buffer.append("<option value='' selected>");
			buffer.append("Select");
			buffer.append("</option>");
		
			ItemBean itemBean=new ItemBean();
			itemBean.setItemId(itemId);
			
			List<String> statusList=new ArrayList<String>();
			
			statusList.add(MISConstants.MASTER_STATUS_VERIFIED);
		
				List<ItemBean> itemBeans = itemDao.findItem(itemBean, statusList);	
			
			
			for (ItemBean itemBean1 : itemBeans) {
				buffer.append("<option value=\"").append(itemBean1.getUnitOfMeasurement().getMeasurementId()).append("\">");
				System.out.println("UOM "+itemBean1.getUnitOfMeasurement());
				buffer.append(itemBean1.getUnitOfMeasurement().getMeasurementId());
				buffer.append("</option>");
			}	
		
		} catch (Exception e) {
			log.error(e.getLocalizedMessage(),e);
			e.printStackTrace();
		}
		return buffer;
		
	}

	public StringBuffer getCircleId(String zoneId) throws MISException {
		Set<LocationBean> locationBeans = null;
		StringBuffer buffer = new StringBuffer();
		try {
			if(MisUtility.ifEmpty(zoneId)){
				locationBeans = locationDao.getChildLocationIds(zoneId, "CIRCLE");
				buffer.append("<option value='' selected>");
				buffer.append("Select Circle");
				buffer.append("</option>");
				for (LocationBean locationBean : locationBeans) {
					buffer.append("<option value=\"").append(locationBean.getLocationId()).append("\">");
						buffer.append(locationBean.getLocationId()+MISConstants.LABEL_VALUE_BEAN_SEPARATOR+locationBean.getLocationName());
						buffer.append("</option>");
				}
			}
		} catch (DataAccessException e) {
			log.error(e);
			e.printStackTrace();
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		
		return buffer;
	}
	public StringBuffer getDistrictId(String circleId) throws MISException {
		Set<LocationBean> locationBeans = null;
		StringBuffer buffer = new StringBuffer();
		try {
			if(MisUtility.ifEmpty(circleId)){
				locationBeans = locationDao.getChildLocationIds(circleId, "DISTRICT");
				buffer.append("<option value='' selected>");
				buffer.append("Select District");
				buffer.append("</option>");
				for (LocationBean locationBean : locationBeans) {
					buffer.append("<option value=\"").append(locationBean.getLocationId()).append("\">");
						buffer.append(locationBean.getLocationId()+MISConstants.LABEL_VALUE_BEAN_SEPARATOR+locationBean.getLocationName());
						buffer.append("</option>");
				}
			}
		} catch (DataAccessException e) {
			log.error(e);
			e.printStackTrace();
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return buffer;
	}
	public StringBuffer getStore(String locationId) throws MISException {
		StringBuffer buffer = new StringBuffer();
		try{
			
			System.out.println("store------------------");
			
			buffer.append("<option value='' selected>");
			buffer.append("Select");
			buffer.append("</option>");
			
			Set<StoreBean> storeBeans = storeDao.getDistinctStoreCodes(locationId);
			for (StoreBean storeBean : storeBeans) {
				buffer.append("<option value=\"").append(storeBean.getStoreId()).append("\">");
				buffer.append(storeBean.getStoreId()).append(MISConstants.LABEL_VALUE_BEAN_SEPARATOR).append(storeBean.getStoreName());
				buffer.append("</option>");
			}	
		
		} catch (Exception e) {
			log.error(e.getLocalizedMessage(),e);
		}
		return buffer;
		
	}
	public StringBuffer getContracts(String locationId) throws MISException {
		StringBuffer buffer = new StringBuffer();
		try{
			
					
			
			buffer.append("<option value='' selected>");
			buffer.append("Select");
			buffer.append("</option>");
			
			Set<ContractHeaderBean> contractHeaderBeans = contractDao.getContractCodes(locationId);
			for (ContractHeaderBean contractHeaderBean : contractHeaderBeans) {
				buffer.append("<option value=\"").append(contractHeaderBean.getContractId()).append("\">");
				buffer.append(contractHeaderBean.getContractId());
				buffer.append("</option>");
			}	
		
		} catch (Exception e) {
			log.error(e.getLocalizedMessage(),e);
		}
		return buffer;
		
	}
	public StringBuffer getItem(String itemGroupId) throws MISException {
		StringBuffer buffer = new StringBuffer();
		try{
			
			System.out.println("contract------------------");
			
			
			
			buffer.append("<option value='' selected>");
			buffer.append("Select");
			buffer.append("</option>");
			
			Set<ItemBean> itemBeans = itemDao.getDistinctItemCodes(itemGroupId, null);
			for (ItemBean itemBean : itemBeans) {
				buffer.append("<option value=\"").append(itemBean.getItemId()).append("\">");
				buffer.append(itemBean.getItemId()).append("-(").append(itemBean.getItemName()).append(")");
				buffer.append("</option>");
			}	
		
		} catch (Exception e) {
			log.error(e.getLocalizedMessage(),e);
		}
		return buffer;
		
	}
}